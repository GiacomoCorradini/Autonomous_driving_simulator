//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// a_opt.cpp
//
// Code generation for function 'a_opt'
//

// Include files
#include "a_opt.h"
#include "a_opt_mex_data.h"
#include "rt_nonfinite.h"
#include "mwmathutil.h"

// Function Definitions
real_T a_opt(const emlrtStack *, real_T t, real_T v0, real_T a0, real_T sf,
             real_T vf, real_T af, real_T T)
{
  real_T b_out1_tmp;
  real_T out1_tmp;
  real_T t2;
  real_T t3;
  real_T t4;
  real_T t4_tmp;
  covrtLogFcn(&emlrtCoverageInstance, 0, 0);
  covrtLogBasicBlock(&emlrtCoverageInstance, 0, 0);
  // A_OPT
  //     OUT1 = A_OPT(t,V0,A0,SF,VF,AF,T)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     29-Nov-2022 16:34:10
  t2 = T * T;
  t3 = af * t2;
  t4_tmp = a0 * t2;
  t4 = t4_tmp * 3.0;
  out1_tmp = T * v0;
  b_out1_tmp = T * vf;
  return ((a0 -
           1.0 / muDoubleScalarPower(T, 5.0) * muDoubleScalarPower(t, 3.0) *
               ((((sf * -12.0 + -t3) + out1_tmp * 6.0) + b_out1_tmp * 6.0) +
                t4_tmp) *
               10.0) +
          t * t / (t2 * t2) *
              ((((sf * -30.0 - t3 * 2.0) + t4) + out1_tmp * 16.0) +
               b_out1_tmp * 14.0) *
              6.0) -
         1.0 / muDoubleScalarPower(T, 3.0) * t *
             ((((sf * -20.0 + t4) + -t3) + out1_tmp * 12.0) +
              b_out1_tmp * 8.0) *
             3.0;
}

// End of code generation (a_opt.cpp)
