//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// evalPrimitiveCoeffs.cpp
//
// Code generation for function 'evalPrimitiveCoeffs'
//

// Include files
#include "evalPrimitiveCoeffs.h"
#include "a_opt_mex_data.h"
#include "rt_nonfinite.h"
#include "mwmathutil.h"

// Function Definitions
void evalPrimitiveCoeffs(real_T v0, real_T a0, real_T sf, real_T vf, real_T T,
                         real_T m[6])
{
  real_T b_m_tmp;
  real_T m_tmp;
  real_T t2;
  real_T t3;
  real_T t4;
  real_T t4_tmp;
  covrtLogFcn(&emlrtCoverageInstance, 5, 0);
  covrtLogBasicBlock(&emlrtCoverageInstance, 5, 0);
  // evalPrimitiveCoeffs
  //     M = evalPrimitiveCoeffs(V0,A0,SF,VF,AF,T)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     12-Dec-2022 17:49:18
  t2 = T * T;
  t3 = 0.0 * t2;
  t4_tmp = a0 * t2;
  t4 = t4_tmp * 3.0;
  m[0] = 0.0;
  m[1] = v0;
  m[2] = a0;
  m_tmp = T * v0;
  b_m_tmp = T * vf;
  m[3] = 1.0 / muDoubleScalarPower(T, 3.0) *
         ((((sf * -20.0 + t4) - t3) + m_tmp * 12.0) + b_m_tmp * 8.0) * -3.0;
  m[4] = 1.0 / (t2 * t2) *
         ((((sf * -30.0 - t3 * 2.0) + t4) + m_tmp * 16.0) + b_m_tmp * 14.0) *
         12.0;
  m[5] = 1.0 / muDoubleScalarPower(T, 5.0) *
         ((((sf * -12.0 - t3) + m_tmp * 6.0) + b_m_tmp * 6.0) + t4_tmp) * -60.0;
}

// End of code generation (evalPrimitiveCoeffs.cpp)
